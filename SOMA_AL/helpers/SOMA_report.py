#Import modules
import os
import warnings
import pandas as pd
import dataframe_image as dfi
from markdown_pdf import MarkdownPdf, Section

class SOMAReport:

    """
    Class to hold reporting functions for the SOMA project
    """

    def add_data_pdf(self, content:list, toc:bool=True, center:bool=False):
        #Formatting
        user_css = 'h4 {text-align:center;}' if center else None
        section = Section(' \n '.join(content), toc=toc)
        self.pdf.add_section(section, user_css=user_css)

    def table_to_pdf(self, table:pd.DataFrame, save_name="SOMA_AL/plots/Table.png"):
        
        #Format titles as titles
        for i in range(len(table)):
            table.index.values[i] = table.index.values[i].title()  
        table.columns = table.columns.str.title()   
        table.columns.name = None   

        #Format the table
        table = table.style.set_table_styles([{'selector': 'th', 'props': [('font-size', '10pt'), 
                                                                           ('text-align', 'center'), 
                                                                           ('background-color', '#FFFFFF')]},

                                                {'selector': 'td', 'props': [('font-size', '10pt'), 
                                                                             ('text-align', 'center'), 
                                                                             ('background-color', '#FFFFFF')]},

                                                {'selector': '', 'props': [('border-top', '1px solid black'), 
                                                                           ('border-bottom', '1px solid black'),
                                                                           ('border-left', '1px solid white'),
                                                                           ('border-right', '1px solid white')]},])
        
        #Save the table as a png
        dfi.export(table, save_name)

        return save_name
    
    def add_figure_caption(self, text):
        section_text = f'**Figure {self.figure_count}.** {text}'
        self.figure_count += 1

        return section_text
    
    def add_table_caption(self, text):
        section_text = f'**Table {self.table_count}.** {text}'
        self.table_count += 1
        
        return section_text

    def save_report(self):
        try:
            #Save pdf with default filename
            self.pdf.save(self.print_filename)
        except: 
            #If file is opened, it will need to save with alternative filename
            original_filename = self.print_filename
            i = 1
            while os.path.exists(self.print_filename):
                try:
                    self.print_filename = original_filename.replace('.pdf', f'-{i}.pdf')
                    self.pdf.save(self.print_filename)
                    break
                except:
                    i += 1
                
            #Raise warning
            warnings.warn(f'File {original_filename} is currently opened. Saving as {self.print_filename}', stacklevel=2)
            
    def build_report(self):

        #Initiate the printing of plots
        self.print_plots()

        #Initiate report class
        self.pdf = MarkdownPdf(toc_level=3)

        #Add title Page
        section_text = [f'# SOMA Report',
                        f'![SOMA_logo](SOMA_AL/media/SOMA_preview.png)']
        self.add_data_pdf(section_text)

        #Add report details
        section_text = [f'## SOMA Report Details',
                        f'**Generated by:** {self.author}\n',
                        f'**Date:** {str(pd.Timestamp.now()).split(" ")[0]}']
        self.add_data_pdf(section_text)

        #Add data characteristics
        section_text = [f'## Data Characteristics',
                        f'**File{"s" if len(self.file_name) > 1 else ""}:** {", ".join(self.file_name)}',
                        f'### Grouping',
                        f'**Split by Group:** {self.split_by_group.capitalize()}',
                        f'### Column Names',
                        f'{", ".join(self.data.columns)}',
                        f'### Data Dimensions',
                        f'**Rows:** {self.data.shape[0]}\n',
                        f'**Columns:** {self.data.shape[1]}\n',
                        f'**Number of Groups:** {len(self.group_labels)}',
                        f'**Number of Original Participants:** {self.participants_original}\n',
                        f'**Number of Participants Excluded (Accuracy Threshold: {self.accuracy_threshold}%):** {self.participants_excluded_accuracy}\n',
                        f'**Number of Participants Remaining:** {self.learning_data["participant_id"].nunique()}\n',
                        f'**Percentage of Trials Excluded (RT Threshold: < {self.RT_low_threshold}ms or > {self.RT_high_threshold}ms):** {self.trials_excluded_rt.round(2)}%\n',
                        ]
        self.add_data_pdf(section_text)

        #Add demographics
        column_blanks = ['','',''] if self.split_by_group == 'pain' else ['','']
        demo_title = pd.DataFrame([column_blanks], columns=self.demographics_summary.columns, index=['Demographics'])
        pain_title = pd.DataFrame([column_blanks], columns=self.demographics_summary.columns, index=['Pain Scores'])
        depression_title = pd.DataFrame([column_blanks], columns=self.demographics_summary.columns, index=['Depression Scores'])
        blank_row = pd.DataFrame([column_blanks], columns=self.demographics_summary.columns, index=[''])
        self.demographics = pd.concat([blank_row,
                                        demo_title,
                                        self.demographics_summary, 
                                        blank_row,
                                        pain_title, 
                                        self.pain_summary], axis=0)
        
        if self.depression_summary is not None:
            self.demographics = pd.concat([self.demographics, 
                                           blank_row, 
                                           depression_title, 
                                           self.depression_summary], axis=0)

        section_table1_caption = f"""Participant demographics{" and " if self.depression_summary is None else ", "}pain scores{"" if self.depression_summary is None else " and depression scores"}. 
                            Metrics reported as mean (standard deviation). F = Female, M = Male, N = Not Specified."""
        table_1_filename = self.table_to_pdf(self.demographics, save_name="SOMA_AL/plots/Table_1_Demographics.png")
        
        section_figure1_caption = """Pain and depression metrics for each group.
        Boxplots show the mean and 95\% confidence intervals of the corresponding metric for each group.
        Half-violin plots show the distribution of the scores of the corresponding metric for each group.
        Scatter points show the scores of the corresponding metric for each participant within each group."""

        section_figure1_caption = self.add_figure_caption(section_figure1_caption)
        section_table1_caption = self.add_table_caption(section_table1_caption)
        
        section_text = [f'## Participant Demographics',
                        f'{section_table1_caption}',
                        f'#### ![Table 1]({table_1_filename})',
                        f'![clinical_plot](SOMA_AL/plots/Figure_N_Clinical_Scores.png)\n',
                        f'{section_figure1_caption}']
        self.add_data_pdf(section_text, center=True)

        #Add behavioural findings
        section_figure1_caption = 'Behavioral performance across learning trials for the rich and poor contexts for each group.'
        if self.rolling_mean is not None:
            section_figure1_caption += f' For visualization, the accuracy is smoothed using a rolling mean of {self.rolling_mean} trials.'
        section_figure1_caption += ' Shaded regions represent 95\% confidence intervals.'

        section_figure2_caption = f"""Reaction time distributions for each phase and group. Half circles represent the mean reaction time for each group.
        Reaction times less than {self.RT_low_threshold}ms and greater than {self.RT_high_threshold}ms were excluded from the analysis.
        """

        section_figure3_caption = """Choice rate for each symbol during transfer trials for each group.
        Choice rate is computed as the number of times a symbol was chosen given the number of times it was presented.
        Boxplots show the mean and 95\% confidence intervals of the choice rate for each symbol type across participants within each group.
        Half-violin plots show the distribution of choice rates for each symbol type across participants within each group.
        Scatter points show the choice rate for each participant within each symbol type."""

        section_figure4_caption = """Choice rates for cases where the low reward was compared to the low punishment symbols in the transfer trials. 
        Choice rates represent the percentage of times the low reward was chosen, thus 50\% indicates equal choice rates for both symbols,
        while greater than 50% indicates a preference for the low reward symbol. 
        Boxplots show the mean and 95\% confidence intervals of the choice rate for each group."""

        section_figure1_caption = self.add_figure_caption(section_figure1_caption)
        section_figure2_caption = self.add_figure_caption(section_figure2_caption)
        section_figure3_caption = self.add_figure_caption(section_figure3_caption)
        section_figure4_caption = self.add_figure_caption(section_figure4_caption)

        section_text = [f'## Behavioural Findings',
                        f'### Learning Accuracy',
                        f'#### ![learning_accuracy](SOMA_AL/plots/Figure_N_Accuracy_Across_Learning.png)\n',
                        f'{section_figure1_caption}',
                        f'### Reaction Time Distributions',
                        f'#### ![rt_distributions](SOMA_AL/plots/Figure_N_RT_Distributions.png)\n',
                        f'{section_figure2_caption}',
                        f'### Transfer Accuracy',
                        f'#### ![transfer_choice](SOMA_AL/plots/Figure_N_Transfer_Choice_Rate.png)\n',
                        f'{section_figure3_caption}',
                        f'### Neutral Transfer Accuracy',
                        f'#### ![neutral_transfer_choice](SOMA_AL/plots/Figure_N_Neutral_Transfer_Choice_Rate.png)\n',
                        f'{section_figure4_caption}']
        
        self.add_data_pdf(section_text, center=True)

        #Save to pdf
        self.save_report()