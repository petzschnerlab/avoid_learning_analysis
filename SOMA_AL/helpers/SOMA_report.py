#Import modules
import os
import warnings
import pandas as pd
from markdown_pdf import MarkdownPdf, Section

class SOMAReport:

    """
    Class to hold reporting functions for the SOMA project
    """

    def add_data_pdf(self, content:list, toc:bool=True, center:bool=False):
        #Formatting
        user_css = 'h1 {text-align:center;}' if center else None
        section = Section(' \n '.join(content), toc=toc)
        self.pdf.add_section(section, user_css=user_css)

    def table_to_pdf(self, table:pd.DataFrame, floatfmt=".2f"):
        table = table.transpose()
        table = table.reset_index(level=[0,1])
        for i in range(1, table.shape[0]):
            if table['level_0'][i] == table['level_0'][i-1]:
                table['level_0'][i] = ''
        for i in range(table.shape[0]):
            table['level_0'][i] = f'**{table["level_0"][i].capitalize()}**' if table['level_0'][i] != '' else ''
        for i in range(table.shape[0]):
            table['level_1'][i] = f'**{table["level_1"][i].capitalize()}**'
        table.columns = table.columns.str.title()
        table.columns.values[0] = ''
        table.columns.values[1] = ''

        return table.to_markdown(floatfmt=floatfmt, index=False)

    def save_report(self):
        try:
            #Save pdf with default filename
            self.pdf.save(self.print_filename)
        except: 
            #If file is opened, it will need to save with alternative filename
            original_filename = self.print_filename
            i = 1
            while os.path.exists(self.print_filename):
                try:
                    self.print_filename = original_filename.replace('.pdf', f'-{i}.pdf')
                    self.pdf.save(self.print_filename)
                    break
                except:
                    i += 1
                
            #Raise warning
            warnings.warn(f'File {original_filename} is currently opened. Saving as {self.print_filename}', stacklevel=2)
            
    def build_report(self):

        #Initiate the printing of plots
        self.print_plots()

        #Initiate report class
        self.pdf = MarkdownPdf(toc_level=3)

        #Add title Page
        section_text = [f'# SOMA Report',
                        f'![SOMA_logo](SOMA_AL/media/SOMA_preview.png)']
        self.add_data_pdf(section_text)

        #Add report details
        section_text = [f'## SOMA Report Details',
                        f'**Generated by:** Chad C. Williams\n',
                        f'**Date:** {pd.Timestamp.now()}']
        self.add_data_pdf(section_text)

        #Add data characteristics
        section_text = [f'## Data Characteristics',
                        f'**File{"s" if len(self.file_name) > 1 else ""}:** {", ".join(self.file_name)}',
                        f'### Column Names',
                        f'{", ".join(self.data.columns)}',
                        f'### Data Dimensions',
                        f'**Rows:** {self.data.shape[0]}\n',
                        f'**Columns:** {self.data.shape[1]}\n',
                        f'**Number of Participants:** {self.data["participant_id"].nunique()}']
        self.add_data_pdf(section_text)

        #Add data summary
        section_text = [f'## Participant Characteristics',
                        f'**Grouped Summary of Pain**',
                        #f'<center>',
                        f'{self.table_to_pdf(self.grouped_summary)}',
                        #f'</center>'
                        ]

        self.add_data_pdf(section_text, center=True)

        #Add behavioural findings
        figure_1_caption = '**Figure 1.** Behavioral performance across learning trials for the rich and poor contexts for each group.'
        if self.fig1_rolling_mean is not None:
            figure_1_caption += f' For visualization, the accuracy is smoothed using a rolling mean of {self.fig1_rolling_mean} trials.'

        if self.fig1_CIs is not False:
            figure_1_caption += ' Shaded regions represent 95\% confidence intervals.'

        section_text = [f'## Behavioural Findings',
                        f'### Learning Accuracy',
                        f'![learning_accuracy](SOMA_AL/plots/Figure_2A_Accuracy_Across_Learning.png)',
                        f'{figure_1_caption}',
                        f'### Transfer Accuracy',
                        f'![transfer_choice](SOMA_AL/plots/Figure_2B_Transfer_Choice_Rate.png)',
                        f"""**Figure 2.** Choice rate for each symbol during transfer trials for each group.
                        Choice rate is computed as the number of times a symbol was chosen given the number of times it was presented.
                        Boxlpots show the mean and standard deviation of the choice rate for each symbol type across participants within each group."""]
        self.add_data_pdf(section_text)

        #Save to pdf
        self.save_report()